on:
  workflow_call:
    inputs:
      GCP_PROJECT_ID:
        required: true
        type: string
      GCP_PROJECT_NUMBER:
        required: true
        type: string
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
        type: string
      GCP_SERVICE_ACCOUNT:
        required: true
        type: string
      GCP_STORAGE_BUCKET_NAME:
        required: true
        type: string
      GCP_STORAGE_SCRAPED_FILE_NAME:
        required: true
        type: string
      GCP_STORAGE_EMBEDDING_FILE_NAME:
        required: true
        type: string
      GCP_EMBEDDING_SUBSCRIPTION:
        required: true
        type: string

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ inputs.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ inputs.GCP_PROJECT_ID }}
          install_components: 'beta'

      - name: Create bucket
        run: |-
          if ! gcloud storage buckets describe gs://${{ GCP_STORAGE_BUCKET_NAME }}; then
            gcloud storage buckets create gs://${{ inputs.GCP_STORAGE_BUCKET_NAME }} --location=europe-west1 --public-access-prevention --uniform-bucket-level-access
          fi

      - name: Create bucket notification on new embeddings
        run: |-
          gcloud storage buckets notifications create gs://${{ inputs.GCP_STORAGE_BUCKET_NAME }} --topic=embeddings-update-topic --event-types=OBJECT_FINALIZE

      - name: Create new embedding subscription
        run: |-
          if ! gcloud pubsub subscriptions describe ${{ inputs.GCP_EMBEDDING_SUBSCRIPTION }}; then
            gcloud pubsub subscriptions create ${{ inputs.GCP_EMBEDDING_SUBSCRIPTION }} --topic=embeddings-update-topic
          fi

      - name: Create crawler image
        run: |-
          gcloud builds submit ./packages/crawler --suppress-logs --pack image=gcr.io/${{ inputs.GCP_PROJECT_ID }}/crawler-job:$GITHUB_SHA

      - name: Deploy crawler to cloud run
        run: |-
          if ! gcloud beta run jobs describe crawler-job --region=europe-west1; then
            gcloud beta run jobs create crawler-job \
            --image gcr.io/${{ inputs.GCP_PROJECT_ID }}/crawler-job:$GITHUB_SHA \
            --tasks 1 \
            --max-retries 1 \
            --region europe-west1 \
            --task-timeout 60m \
            --set-secrets NOTION_TOKEN=notion-token:latest \
            --set-env-vars GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }} \
            --set-env-vars GCP_STORAGE_FILE_NAME=${{ inputs.GCP_STORAGE_SCRAPED_FILE_NAME }}
          else
            gcloud beta run jobs update crawler-job \
            --image gcr.io/${{ inputs.GCP_PROJECT_ID }}/crawler-job:$GITHUB_SHA \
            --tasks 1 \
            --max-retries 1 \
            --region europe-west1 \
            --task-timeout 60m \
            --set-secrets NOTION_TOKEN=notion-token:latest \
            --set-env-vars GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }} \
            --set-env-vars GCP_STORAGE_FILE_NAME=${{ inputs.GCP_STORAGE_SCRAPED_FILE_NAME }}
          fi

      - name: Update scheduler
        run: |-
          if ! gcloud scheduler jobs describe crawl-schedule-job --location=europe-west1; then
            gcloud scheduler jobs create http crawl-schedule-job \
            --location europe-west1 \
            --schedule="0 0 * * 1" \
            --uri="https://europe-west1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/slack-kb-chatgpt-responder/jobs/crawler-job:run" \
            --http-method POST \
            --oauth-service-account-email ${{ inputs.GCP_PROJECT_NUMBER }}-compute@developer.gserviceaccount.com
          else
            gcloud scheduler jobs update http crawl-schedule-job \
            --location europe-west1 \
            --schedule="0 0 * * 1" \
            --uri="https://europe-west1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/slack-kb-chatgpt-responder/jobs/crawler-job:run" \
            --http-method POST \
            --oauth-service-account-email ${{ inputs.GCP_PROJECT_NUMBER }}-compute@developer.gserviceaccount.com
          fi

      - name: Update secrets in GCP Secret Manager
        uses: nearform-actions/github-action-gcp-secrets@v1
        with:
          secrets: |-
            notion-token:"${{ secrets.NOTION_TOKEN }}"
            slack-bot-token:"${{ secrets.SLACK_BOT_TOKEN }}"
            slack-signing-secret:"${{ secrets.SLACK_SIGNING_SECRET }}"
            openai-api-key:"${{ secrets.OPENAI_API_KEY }}"

      - name: Deploy slackBot to Cloud Run
        id: deploy-slack-bot
        run: >-
          gcloud beta functions deploy slackbot
          --runtime nodejs18 
          --memory=512MB
          --min-instances=1
          --max-instances=5
          --concurrency=5
          --region=europe-west1
          --gen2
          --source=./packages/slack-bot
          --entry-point=slackBot 
          --trigger-http 
          --allow-unauthenticated
          --set-env-vars=GCP_PROJECT_ID=${{ inputs.GCP_PROJECT_ID }}
          --set-env-vars=GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }}
          --set-env-vars=GCP_STORAGE_EMBEDDING_FILE_NAME=${{ inputs.GCP_STORAGE_EMBEDDING_FILE_NAME }}
          --set-env-vars=GCP_EMBEDDING_SUBSCRIPTION=${{ inputs.GCP_EMBEDDING_SUBSCRIPTION }}
          --set-secrets=SLACK_BOT_TOKEN=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/slack-bot-token:latest
          --set-secrets=SLACK_SIGNING_SECRET=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/slack-signing-secret:latest
          --set-secrets=OPENAI_API_KEY=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/openai-api-key:latest

      - name: Deploy embedding-creation to Cloud Run
        id: deploy-embedding-creation
        run: >-
          gcloud functions deploy embedding-creation 
          --runtime=nodejs18
          --memory=512MB
          --region=europe-west1
          --gen2
          --source=./packages/embeddings-creation 
          --entry-point=create_embeddings 
          --trigger-bucket=${{ inputs.GCP_STORAGE_BUCKET_NAME }} 
          --set-secrets=OPENAI_API_KEY=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/openai-api-key:latest
          --set-env-vars=GCP_STORAGE_SCRAPED_FILE_NAME=${{ inputs.GCP_STORAGE_SCRAPED_FILE_NAME }}
          --set-env-vars=GCP_STORAGE_EMBEDDING_FILE_NAME=${{ inputs.GCP_STORAGE_EMBEDDING_FILE_NAME }}

      - name: 'Show summary'
        run: >-
          echo "App successfully deployed."
