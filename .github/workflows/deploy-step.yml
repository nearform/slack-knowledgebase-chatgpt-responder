on:
  workflow_call:
    inputs:
      GCP_PROJECT_ID:
        required: true
        type: string
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
        type: string
      GCP_SERVICE_ACCOUNT:
        required: true
        type: string
      GCP_STORAGE_BUCKET_NAME:
        required: true
        type: string
      GCP_STORAGE_SCRAPED_FILE_NAME:
        required: true
        type: string
      GCP_STORAGE_EMBEDDING_FILE_NAME:
        required: true
        type: string

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ inputs.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ inputs.GCP_PROJECT_ID }}

      - name: Create image
        run: |-
          gcloud builds submit --pack image=gcr.io/${{ inputs.GCP_PROJECT_ID }}/crawler-job

          gcloud beta run jobs create crawler-job \
          --image gcr.io/${{ inputs.GCP_PROJECT_ID }}/crawler-job \
          --tasks 1 \
          --max-retries 1 \
          --region europe-west1 \
          --task-timeout 60m \
          --set-secrets NOTION_TOKEN=notion-token:latest \
          --set-env-vars GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }} \
          --set-env-vars GCP_STORAGE_FILE_NAME=${{ inputs.GCP_STORAGE_FILE_NAME }}

      - name: Update scheduler
        run: |
          if ! gcloud scheduler jobs describe crawl-schedule-job --location=europe-west1; then
            gcloud scheduler jobs create http crawl-schedule-job \
            --location europe-west1 \
            --schedule="* * 1 * *" \
            --uri="https://europe-west1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/slack-kb-chatgpt-responder/jobs/crawler-job:run" \
            --http-method POST
          else
            gcloud scheduler jobs update http crawl-schedule-job \
            --location europe-west1 \
            --schedule="* * 1 * *" \
            --uri="https://europe-west1-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/slack-kb-chatgpt-responder/jobs/crawler-job:run" \
            --http-method POST
          fi

      - name: Update secrets in GCP Secret Manager
        uses: nearform-actions/github-action-gcp-secrets@v1
        with:
          secrets: |-
            notion-token:"${{ secrets.NOTION_TOKEN }}"
            slack-bot-token:"${{ secrets.SLACK_BOT_TOKEN }}"
            slack-signing-secret:"${{ secrets.SLACK_SIGNING_SECRET }}"
            openai-api-key:"${{ secrets.OPENAI_API_KEY }}"

      - name: 'Deploy crawl to Cloud Run'
        id: deploy-crawl
        run: >-
          gcloud functions deploy crawl
          --runtime=nodejs18
          --region=europe-west1
          --memory=256Mb
          --gen2
          --source=./packages/crawler
          --entry-point crawl
          --trigger-topic=crawler-topic
          --set-secrets=NOTION_TOKEN=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/notion-token:latest
          --set-env-vars=GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }}
          --set-env-vars=GCP_STORAGE_SCRAPED_FILE_NAME=${{ inputs.GCP_STORAGE_SCRAPED_FILE_NAME }}

      - name: 'Deploy slackBot to Cloud Run'
        id: deploy-slack-bot
        run: >-
          gcloud functions deploy slackbot
          --runtime python39 
          --memory=512MB
          --region=europe-west1
          --gen2
          --source=./packages/slack-bot
          --entry-point=slack_bot 
          --trigger-http 
          --allow-unauthenticated
          --set-env-vars=SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True
          --set-env-vars=GCP_STORAGE_BUCKET_NAME=${{ inputs.GCP_STORAGE_BUCKET_NAME }}
          --set-env-vars=GCP_STORAGE_EMBEDDING_FILE_NAME=${{ inputs.GCP_STORAGE_EMBEDDING_FILE_NAME }}
          --set-secrets=SLACK_BOT_TOKEN=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/slack-bot-token:latest
          --set-secrets=SLACK_SIGNING_SECRET=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/slack-signing-secret:latest
          --set-secrets=OPENAI_API_KEY=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/openai-api-key:latest

      - name: 'Deploy embedding-creation to Cloud Run'
        id: deploy-embedding-creation
        run: >-
          gcloud functions deploy embedding-creation 
          --runtime=python311 
          --memory=512MB
          --region=europe-west1
          --gen2
          --source=./packages/embeddings-creation 
          --entry-point=create_embeddings 
          --trigger-bucket=${{ inputs.GCP_STORAGE_BUCKET_NAME }} 
          --set-secrets=OPENAI_API_KEY=projects/${{ inputs.GCP_PROJECT_ID }}/secrets/openai-api-key:latest
          --set-env-vars=GCP_STORAGE_SCRAPED_FILE_NAME=${{ inputs.GCP_STORAGE_SCRAPED_FILE_NAME }}
          --set-env-vars=GCP_STORAGE_EMBEDDING_FILE_NAME=${{ inputs.GCP_STORAGE_EMBEDDING_FILE_NAME }}

      - name: 'Show summary'
        run: >-
          echo "App successfully deployed."
